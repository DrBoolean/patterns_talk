var Constructor = require('../util').Constructor;

var Max = Constructor(function(val) {
	this.val = val;
});

var getMax = function(c) { return c.val; };

Max.prototype.map = function(f) {
	return Max(f(this.val));
};

Max.prototype.empty = function() { return Max(0); };

Max.prototype.concat = function(s2) { return Max(this.val > s2.val ? this.val : s2.val); };

Max.prototype.of = function(x) {
	return Max(x);
};

Max.prototype.ap = function(s2) {
	return Max(ap(this.val, s2.val));
};

Max.prototype.chain = function(f) {
	return f(this.val);
};

var inspect = function(x) {
  if(x==null || x==undefined) return "null";
  return x.inspect ? x.inspect() : x;
}

Max.prototype.inspect = function(f) {
	return 'Max('+inspect(this.val)+')';
};

module.exports = {Max: Max, getMax: getMax}
